/*
 * This file is generated by jOOQ.
 */
package com.examples.jooq.generated.tables.records;


import com.examples.jooq.generated.tables.Carpart;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CarpartRecord extends UpdatableRecordImpl<CarpartRecord> implements Record4<Integer, Integer, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.CARPART.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.CARPART.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.CARPART.CAR_ID</code>.
     */
    public void setCarId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.CARPART.CAR_ID</code>.
     */
    public Integer getCarId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>PUBLIC.CARPART.NAME</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.CARPART.NAME</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.CARPART.PRICE</code>.
     */
    public void setPrice(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.CARPART.PRICE</code>.
     */
    public BigDecimal getPrice() {
        return (BigDecimal) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, String, BigDecimal> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Carpart.CARPART.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Carpart.CARPART.CAR_ID;
    }

    @Override
    public Field<String> field3() {
        return Carpart.CARPART.NAME;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Carpart.CARPART.PRICE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCarId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public BigDecimal component4() {
        return getPrice();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCarId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public BigDecimal value4() {
        return getPrice();
    }

    @Override
    public CarpartRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CarpartRecord value2(Integer value) {
        setCarId(value);
        return this;
    }

    @Override
    public CarpartRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public CarpartRecord value4(BigDecimal value) {
        setPrice(value);
        return this;
    }

    @Override
    public CarpartRecord values(Integer value1, Integer value2, String value3, BigDecimal value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CarpartRecord
     */
    public CarpartRecord() {
        super(Carpart.CARPART);
    }

    /**
     * Create a detached, initialised CarpartRecord
     */
    public CarpartRecord(Integer id, Integer carId, String name, BigDecimal price) {
        super(Carpart.CARPART);

        setId(id);
        setCarId(carId);
        setName(name);
        setPrice(price);
    }
}
